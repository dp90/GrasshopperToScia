using Rhino;
using Rhino.Geometry;
using Rhino.DocObjects;
using Rhino.Collections;

using GH_IO;
using GH_IO.Serialization;
using Grasshopper;
using Grasshopper.Kernel;
using Grasshopper.Kernel.Data;
using Grasshopper.Kernel.Types;

using System;
using System.IO;
using System.Xml;
using System.Xml.Linq;
using System.Linq;
using System.Data;
using System.Drawing;
using System.Reflection;
using System.Collections;
using System.Windows.Forms;
using System.Collections.Generic;
using System.Runtime.InteropServices;



/// <summary>
/// This class will be instantiated on demand by the Script component.
/// </summary>
public class Script_Instance : GH_ScriptInstance
{
#region Utility functions
  /// <summary>Print a String to the [Out] Parameter of the Script component.</summary>
  /// <param name="text">String to print.</param>
  private void Print(string text) { /* Implementation hidden. */ }
  /// <summary>Print a formatted String to the [Out] Parameter of the Script component.</summary>
  /// <param name="format">String format.</param>
  /// <param name="args">Formatting parameters.</param>
  private void Print(string format, params object[] args) { /* Implementation hidden. */ }
  /// <summary>Print useful information about an object instance to the [Out] Parameter of the Script component. </summary>
  /// <param name="obj">Object instance to parse.</param>
  private void Reflect(object obj) { /* Implementation hidden. */ }
  /// <summary>Print the signatures of all the overloads of a specific method to the [Out] Parameter of the Script component. </summary>
  /// <param name="obj">Object instance to parse.</param>
  private void Reflect(object obj, string method_name) { /* Implementation hidden. */ }
#endregion

#region Members
  /// <summary>Gets the current Rhino document.</summary>
  private readonly RhinoDoc RhinoDocument;
  /// <summary>Gets the Grasshopper document that owns this script.</summary>
  private readonly GH_Document GrasshopperDocument;
  /// <summary>Gets the Grasshopper script component that owns this script.</summary>
  private readonly IGH_Component Component;
  /// <summary>
  /// Gets the current iteration count. The first call to RunScript() is associated with Iteration==0.
  /// Any subsequent call within the same solution will increment the Iteration count.
  /// </summary>
  private readonly int Iteration;
#endregion

  /// <summary>
  /// This procedure contains the user code. Input parameters are provided as regular arguments,
  /// Output parameters as ref arguments. You don't have to assign output parameters,
  /// they will have a default value.
  /// </summary>
  private void RunScript(List<string> CrossSection, List<Curve> Curves, ref object Elements)
  {
            /*
    This element combines a cross section type and a collection of strings into a format that can be used
  by the WriteXML node. Lines/polylines are defined by 2 points. Splines are defined by 10 points.
    The format is:
    Cross section in branch {0}
    Points for lines in branch {1,i} in which i is the ith curve processed.
    */

    DataTree<Object> elements = new DataTree<Object>();

    // Cross section to path {0}
    elements.Add(CrossSection[0], new GH_Path(0));

    // Loop through all curves
    for (int i = 0; i < Curves.Count; i++) {
      // Determine type of curve
      Type t = Curves[i].GetType();

      // Line defined by begin and end points
      if (t.Equals(typeof(LineCurve))) {
        Curve curve = Curves[i].ToNurbsCurve();
        Point3d point1 = curve.PointAtStart;
        Point3d point2 = curve.PointAtEnd;
        elements.Add(point1, new GH_Path(1, i));
        elements.Add(point2, new GH_Path(1, i));
      }
        // Polyline defined by begin and end points
      else if (t.Equals(typeof(PolylineCurve))) {
        Curve curve = Curves[i].ToNurbsCurve();
        Point3d point1 = curve.PointAtStart;
        Point3d point2 = curve.PointAtEnd;
        elements.Add(point1, new GH_Path(1, i));
        elements.Add(point2, new GH_Path(1, i));
      }
        // Spline/Nurbs defined by 10 points to make it the same in Scia as in GH
      else {
        Curve curve = Curves[i].ToNurbsCurve();
        Point3d[] pts = new Point3d[0];
        curve.DivideByCount(9, true, out pts);
        for (int j = 0 ; j < pts.Count() ; j++ ) {
          elements.Add(pts[j], new GH_Path(1, i));
        }
      }
    }

    Elements = elements;
  }

  // <Custom additional code> 

  // </Custom additional code> 
}