using Rhino;
using Rhino.Geometry;
using Rhino.DocObjects;
using Rhino.Collections;

using GH_IO;
using GH_IO.Serialization;
using Grasshopper;
using Grasshopper.Kernel;
using Grasshopper.Kernel.Data;
using Grasshopper.Kernel.Types;

using System;
using System.IO;
using System.Xml;
using System.Xml.Linq;
using System.Linq;
using System.Data;
using System.Drawing;
using System.Reflection;
using System.Collections;
using System.Windows.Forms;
using System.Collections.Generic;
using System.Runtime.InteropServices;



/// <summary>
/// This class will be instantiated on demand by the Script component.
/// </summary>
public class Script_Instance : GH_ScriptInstance
{
#region Utility functions
  /// <summary>Print a String to the [Out] Parameter of the Script component.</summary>
  /// <param name="text">String to print.</param>
  private void Print(string text) { /* Implementation hidden. */ }
  /// <summary>Print a formatted String to the [Out] Parameter of the Script component.</summary>
  /// <param name="format">String format.</param>
  /// <param name="args">Formatting parameters.</param>
  private void Print(string format, params object[] args) { /* Implementation hidden. */ }
  /// <summary>Print useful information about an object instance to the [Out] Parameter of the Script component. </summary>
  /// <param name="obj">Object instance to parse.</param>
  private void Reflect(object obj) { /* Implementation hidden. */ }
  /// <summary>Print the signatures of all the overloads of a specific method to the [Out] Parameter of the Script component. </summary>
  /// <param name="obj">Object instance to parse.</param>
  private void Reflect(object obj, string method_name) { /* Implementation hidden. */ }
#endregion

#region Members
  /// <summary>Gets the current Rhino document.</summary>
  private readonly RhinoDoc RhinoDocument;
  /// <summary>Gets the Grasshopper document that owns this script.</summary>
  private readonly GH_Document GrasshopperDocument;
  /// <summary>Gets the Grasshopper script component that owns this script.</summary>
  private readonly IGH_Component Component;
  /// <summary>
  /// Gets the current iteration count. The first call to RunScript() is associated with Iteration==0.
  /// Any subsequent call within the same solution will increment the Iteration count.
  /// </summary>
  private readonly int Iteration;
#endregion

  /// <summary>
  /// This procedure contains the user code. Input parameters are provided as regular arguments,
  /// Output parameters as ref arguments. You don't have to assign output parameters,
  /// they will have a default value.
  /// </summary>
  private void RunScript(List<Curve> Curves, List<string> Ends, List<string> X, List<string> Y, List<string> Z, List<string> Rx, List<string> Ry, List<string> Rz, ref object Hinges)
  {
    DataTree<Object> hinges = new DataTree<Object>();
    // loop through all curves supplied
    for (int i = 0 ; i < Curves.Count() ; i++) {
      // Get type of line: LineCurve or PolylineCurve gives only begin and endpoint, everything else gives 10 points
      Type t = Curves[i].GetType();
      // get begin and end point of line or polyline
      if (t.Equals(typeof(LineCurve)) || t.Equals(typeof(PolylineCurve))) {
        Curve curve = Curves[i].ToNurbsCurve();
        Point3d point1 = curve.PointAtStart;
        Point3d point2 = curve.PointAtEnd;
        hinges.Add(point1, new GH_Path(0, i));
        hinges.Add(point2, new GH_Path(0, i));
      }
        // Add points for the non-straight lines
      else {
        Curve curve = Curves[i].ToNurbsCurve();
        Point3d[] pts = new Point3d[0];
        curve.DivideByCount(9, true, out pts);
        for (int j = 0 ; j < pts.Count() ; j++ ) {
          // in branch {0,i} the 0 indicates the branch for the curves, while the i indicates the ith curve.
          // branch {0,i} contains lists of either 2 or 10 points.
          hinges.Add(pts[j], new GH_Path(0, i));
        }
      }
      // add to branch on which ends the hinges must be placed {1}
      if (Curves.Count() == Ends.Count()) {
        hinges.Add(Ends[i], new GH_Path(1));
      } else {
        hinges.Add(Ends[0], new GH_Path(1));
      }
      // check if 1 X, Y, Z, Rx, Ry or Rz value is supplied or multiple, and create lists accordingly
      if (Curves.Count() == X.Count()) {
        hinges.Add(X[i], new GH_Path(2));
      } else {
        hinges.Add(X[0], new GH_Path(2));
      }
      //
      if (Curves.Count() == Y.Count()) {
        hinges.Add(Y[i], new GH_Path(3));
      } else {
        hinges.Add(Y[0], new GH_Path(3));
      }
      //
      if (Curves.Count() == Z.Count()) {
        hinges.Add(Z[i], new GH_Path(4));
      } else {
        hinges.Add(Z[0], new GH_Path(4));
      }
      //
      if (Curves.Count() == Rx.Count()) {
        hinges.Add(Rx[i], new GH_Path(5));
      } else {
        hinges.Add(Rx[0], new GH_Path(5));
      }
      //
      if (Curves.Count() == Ry.Count()) {
        hinges.Add(Ry[i], new GH_Path(6));
      } else {
        hinges.Add(Ry[0], new GH_Path(6));
      }
      //
      if (Curves.Count() == Rz.Count()) {
        hinges.Add(Rz[i], new GH_Path(7));
      } else {
        hinges.Add(Rz[0], new GH_Path(7));
      }
    }

    Hinges = hinges;
  }

  // <Custom additional code> 

  // </Custom additional code> 
}