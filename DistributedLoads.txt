using Rhino;
using Rhino.Geometry;
using Rhino.DocObjects;
using Rhino.Collections;

using GH_IO;
using GH_IO.Serialization;
using Grasshopper;
using Grasshopper.Kernel;
using Grasshopper.Kernel.Data;
using Grasshopper.Kernel.Types;

using System;
using System.IO;
using System.Xml;
using System.Xml.Linq;
using System.Linq;
using System.Data;
using System.Drawing;
using System.Reflection;
using System.Collections;
using System.Windows.Forms;
using System.Collections.Generic;
using System.Runtime.InteropServices;



/// <summary>
/// This class will be instantiated on demand by the Script component.
/// </summary>
public class Script_Instance : GH_ScriptInstance
{
#region Utility functions
  /// <summary>Print a String to the [Out] Parameter of the Script component.</summary>
  /// <param name="text">String to print.</param>
  private void Print(string text) { /* Implementation hidden. */ }
  /// <summary>Print a formatted String to the [Out] Parameter of the Script component.</summary>
  /// <param name="format">String format.</param>
  /// <param name="args">Formatting parameters.</param>
  private void Print(string format, params object[] args) { /* Implementation hidden. */ }
  /// <summary>Print useful information about an object instance to the [Out] Parameter of the Script component. </summary>
  /// <param name="obj">Object instance to parse.</param>
  private void Reflect(object obj) { /* Implementation hidden. */ }
  /// <summary>Print the signatures of all the overloads of a specific method to the [Out] Parameter of the Script component. </summary>
  /// <param name="obj">Object instance to parse.</param>
  private void Reflect(object obj, string method_name) { /* Implementation hidden. */ }
#endregion

#region Members
  /// <summary>Gets the current Rhino document.</summary>
  private readonly RhinoDoc RhinoDocument;
  /// <summary>Gets the Grasshopper document that owns this script.</summary>
  private readonly GH_Document GrasshopperDocument;
  /// <summary>Gets the Grasshopper script component that owns this script.</summary>
  private readonly IGH_Component Component;
  /// <summary>
  /// Gets the current iteration count. The first call to RunScript() is associated with Iteration==0.
  /// Any subsequent call within the same solution will increment the Iteration count.
  /// </summary>
  private readonly int Iteration;
#endregion

  /// <summary>
  /// This procedure contains the user code. Input parameters are provided as regular arguments,
  /// Output parameters as ref arguments. You don't have to assign output parameters,
  /// they will have a default value.
  /// </summary>
  private void RunScript(List<Curve> Curves, string LoadCase, string Direction, List<string> CoordSyst, List<string> Magnitude, ref object LineLoads)
  {
                    /*
    This element combines curves, load case names, directions, coordinate system declarations and magnitudes
    into a format that can be used by the WriteXML node.
    This node creates a branch for each of the above variables. Each branch contains a list with the length of the # of curves
    that is put into the node. The exception is curve itself, which is split up into 2 or 10 points depending on the type (line
    or spline).
    The load case and direction accept only 1 value. CoordSyst and Magnitude can be 1 value, or the same # of values as
    the # of points.
    For all variables with 1 value, the list in the branch contains # of points times that value.
    */

    DataTree<Object> lineloads = new DataTree<Object>();
    // loop through all curves supplied
    for (int i = 0 ; i < Curves.Count() ; i++) {
      // Get type of line: LineCurve or PolylineCurve gives only begin and endpoint, everything else gives 10 points
      Type t = Curves[i].GetType();
      // get begin and end point of line or polyline
      if (t.Equals(typeof(LineCurve)) || t.Equals(typeof(PolylineCurve))) {
        Curve curve = Curves[i].ToNurbsCurve();
        Point3d point1 = curve.PointAtStart;
        Point3d point2 = curve.PointAtEnd;
        lineloads.Add(point1, new GH_Path(0, i));
        lineloads.Add(point2, new GH_Path(0, i));
      }
        // Add points for the non-straight lines
      else {
        Curve curve = Curves[i].ToNurbsCurve();
        Point3d[] pts = new Point3d[0];
        curve.DivideByCount(9, true, out pts);
        for (int j = 0 ; j < pts.Count() ; j++ ) {
          // in branch {0,i} the 0 indicates the branch for the curves, while the i indicates the ith curve.
          // branch {0,i} contains lists of either 2 or 10 points.
          lineloads.Add(pts[j], new GH_Path(0, i));
        }
      }
      // add load case to branch {1}
      lineloads.Add(LoadCase, new GH_Path(1));
      // add direction to branch {2}
      lineloads.Add(Direction, new GH_Path(2));
      // check if 1 coordinate system declaration is supplied or multiple, and create list accordingly
      if (Curves.Count() == CoordSyst.Count()) {
        lineloads.Add(CoordSyst[i], new GH_Path(3));
      } else {
        lineloads.Add(CoordSyst[0], new GH_Path(3));
      }
      // check if 1 magnitude is supplied or multiple, and create list accordingly
      if (Curves.Count() == Magnitude.Count()) {
        lineloads.Add(Magnitude[i], new GH_Path(4));
      } else {
        lineloads.Add(Magnitude[0], new GH_Path(4));
      }
    }

    LineLoads = lineloads;
  }

  // <Custom additional code> 

  // </Custom additional code> 
}